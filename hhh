class persona ():
    def __init__(self,Hermanos,Padres):
        self.Hermanos = [] # hermanos de la persona (n datos)
        self.Padres = []# padres de la persona (2 datos o menos)

    def add_siblings (self,Hermanos):
        # TODO: verificar y asegurar que los hermanos tengan los mismos padres (0.5)
        self.Hermanos.append(Hermanos)

    def add_parents (self,Padres):
        if len(self.Padres) < 2:
            self.Padres.append(Padres)
        else:
            print('No se puede agregar')
    def search (self,nombre):
        i =0
        while i <len(self.Hermanos):
            if nombre==self.Hermanos[i]:
                print(f"{nombre} es hermano")
                break
            else:
                i+=1
        j =0
        while j<len(self.Padres):
            if nombre==self.Padres[i]:
                print(f"{nombre} es un padre")
                break
            else:
                j+=1

    '''
        se busca a cualquier persona en el arbol, se asume que el usuario puede colocar cualquier combinación de
        mayusculas y minusculas
        :param nombre: nombre de la persona a buscar
        :return: retorna el objeto encontrado así como la altura a la que se encuentra el elemento
        '''
        #TODO: Implementar un método de busqueda para encontrar a cualquier persona en el arbol (0.5)

    def tree2dict (self):
        '''
        convierte el arbol actual en un diccionario usando los nombres como llaves y los padres y hermanos como llaves
        :return: retorna un diccionario
        '''
        # TODO: Implementar una función que permita convertir el arbol actual en un diccionario (1.0)

    def encript(self,nombre):
        '''
        crea un archivo encriptado, con la información correspondiente al arbol
        :param nombre: nombre del archivo que se desea crear
        :return: null
        '''
        alfabeto=["a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z"]
        str_msg=""
        s_key=3
        for letra in nombre:
            if letra in alfabeto:
                indice_actual=alfabeto.index(letra)
                indice=indice_actual + s_key
            if indice>26:
                indice-=26
                str_msg+=alfabeto[indice]
        else:
            str_msg+= letra
            return str_msg, s_key
            print(encript(nombre))
        # TODO: Implementar una función que permita converti el arbol en un archivo encriptado (1.0)

    def decrip(self,nombre):
        '''
        lee un archivo de texto, lo decifra y convierte el resultado en el arbol correspondiente
        :param nombre: Nombre del archivo que se desea leer
        :return: arbol creado
        '''

        #TODO: Im plementar una función que permita convertir un archivo encriptado en un arbol (1.0
gustav = persona("Hermanos","Padres")
gustav.add_siblings("juan")
gustav.add_siblings("pablo")
gustav.add_siblings("pedro")
gustav.add_siblings("jose")
gustav.add_parents("jaime")
gustav.add_parents("luisa")
juan = persona("Hermanos","Padres")
gustav.search("juan")
print(gustav.Hermanos,gustav.Padres)
print(encript(nombre))
#gustav.search("luisa")
