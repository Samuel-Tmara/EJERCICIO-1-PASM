# #buscar videos de metodos de busqueda
# #pilas
# def apilar(self,datos):
#     self.append(datos)
# def desapilar(self):
#     self.pop()
#
# #colas
# def agregar(self,datos):
#     self.append(datos)
# def quitar(self):
#     self.pop(0)
#
#
# #example
# class estructura(object):
#
#     def __init__(self,valor):
#         self.dato=valor
#         self.siguiente=[]
#     def agregar(self,nuevo):
#         if self.siguiente==[]:
#             self.siguiente=nuevo
#         else:
#             self.siguiente.agregar(nuevo)
#     def buscar(self,obj):
#         if self.dato==obj:
#             return self
#         else:
#             return self.siguiente.buscar(obj)
#
#     def eliminar(self,obj):
#         if self.siguiente==obj:
#             self.siguiente=self.siguiente.siguiente
#         else:
#             self.siguiente.eliminar(obj)
#
#
# #arbol binario
# class arbol(object):
#     def __init__(self,valor):
#         self.valor=valor
#         self.mayor=[]
#         self.menor=[]
#
#     def agregar(self,dato):
#         if dato>self.valor:
#             if self.mayor=[0]:
#                 self.mayor=dato
#         else:
#             self.mayor.agregar(dato)


#----------------------------------------------------------------------------------------------------------------------
lista=(0,1,2,3,4,5,6,7)
#ejericio de balanceo de un arbo en python
def balancera_arbol(lista):
    if len(lista==1):
        return balancera_arbol(lista)
    else:
        pivote=len(lista)//2
        raiz=balancera_arbol(lista[pivote])
        listamenor=lista[0:pivote]
        listamayor=lista[pivote+1:-1]
        arbol_menor=balancera_arbol(listamenor)
        arbol_mayor=balancera_arbol(listamayor)
        raiz.menor=arbol_menor
        raiz.mayor=arbol_mayor
        return(raiz)
